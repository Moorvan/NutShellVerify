package nutcore.isa

import chisel3.util._
import chisel3._
import nutcore._
import nutcore.backend.fu._
import nutcore.frontend._



object RV32I_BRUInstr extends HasInstrType {
  def JAL     = BitPat("b????????????????????_?????_1101111")
  def JALR    = BitPat("b????????????_?????_000_?????_1100111")

  def BNE     = BitPat("b???????_?????_?????_001_?????_1100011")
  def BEQ     = BitPat("b???????_?????_?????_000_?????_1100011")
  def BLT     = BitPat("b???????_?????_?????_100_?????_1100011")
  def BGE     = BitPat("b???????_?????_?????_101_?????_1100011")
  def BLTU    = BitPat("b???????_?????_?????_110_?????_1100011")
  def BGEU    = BitPat("b???????_?????_?????_111_?????_1100011")

  val table = Array(
    JAL            -> List(InstrJ, FuType.bru, ALUOpType.jal),
    JALR           -> List(InstrI, FuType.bru, ALUOpType.jalr),

    BEQ            -> List(InstrB, FuType.bru, ALUOpType.beq),
    BNE            -> List(InstrB, FuType.bru, ALUOpType.bne),
    BLT            -> List(InstrB, FuType.bru, ALUOpType.blt),
    BGE            -> List(InstrB, FuType.bru, ALUOpType.bge),
    BLTU           -> List(InstrB, FuType.bru, ALUOpType.bltu),
    BGEU           -> List(InstrB, FuType.bru, ALUOpType.bgeu)
  )

  val bruFuncTobtbTypeTable = List(
    ALUOpType.beq  -> BTBtype.B,
    ALUOpType.bne  -> BTBtype.B,
    ALUOpType.blt  -> BTBtype.B,
    ALUOpType.bge  -> BTBtype.B,
    ALUOpType.bltu -> BTBtype.B,
    ALUOpType.bgeu -> BTBtype.B,
    ALUOpType.call -> BTBtype.J,
    ALUOpType.ret  -> BTBtype.R,
    ALUOpType.jal  -> BTBtype.J,
    ALUOpType.jalr -> BTBtype.I
  )
}